{"version":3,"sources":["types.js","components/Todo/Todo.jsx","components/TodoListForm/TodoListForm.jsx","components/TodoList/TodoList.jsx","api.js","components/CurrentUser/CurrentUser.jsx","App.jsx","index.js"],"names":["PropTypes","shape","title","string","completed","bool","userId","number","isRequired","defaultProps","Todo","todo","selectedUserId","onUserSelect","type","checked","readOnly","className","classnames","onClick","TodoListForm","query","setSearchQuery","todoStatus","setTodoStatus","htmlFor","id","value","placeholder","onChange","TodoList","todos","length","map","key","request","endpoint","fetch","then","response","ok","Error","status","statusText","json","CurrentUser","state","user","error","prevProps","this","props","getUser","data","setState","catch","message","name","email","phone","clearSelectedUserId","React","Component","App","setSelectedUserId","target","filter","hasStatus","toLowerCase","includes","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.d0a2c1b8.chunk.js","sourcesContent":["import PropTypes from 'prop-types';\n\nexport const TodoType = PropTypes.shape({\n  title: PropTypes.string,\n  completed: PropTypes.bool,\n  userId: PropTypes.number.isRequired,\n});\n\nTodoType.defaultProps = {\n  title: '',\n  completed: false,\n};\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport classnames from 'classnames';\nimport { TodoType } from '../../types';\n\nexport const Todo = ({ todo, selectedUserId, onUserSelect }) => (\n  <>\n    <label>\n      <input\n        type=\"checkbox\"\n        checked={todo.completed}\n        readOnly\n      />\n      <p>{todo.title}</p>\n    </label>\n    <button\n      className={classnames(\n        'TodoList__user-button',\n        'button',\n        {\n          'TodoList__user-button--selected': todo.userId === selectedUserId,\n        },\n      )}\n      type=\"button\"\n      onClick={() => {\n        if (todo.userId !== selectedUserId) {\n          onUserSelect(todo.userId);\n        }\n      }}\n    >\n      User&nbsp;#\n      {todo.userId}\n    </button>\n  </>\n);\n\nTodo.propTypes = {\n  todo: TodoType.isRequired,\n  selectedUserId: PropTypes.number.isRequired,\n  onUserSelect: PropTypes.func.isRequired,\n};\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nexport const TodoListForm = ({\n  query,\n  setSearchQuery,\n  todoStatus,\n  setTodoStatus,\n}) => (\n  <form className=\"box\">\n    <div className=\"field\">\n      <label htmlFor=\"search-query\" className=\"label\">\n        Filter todos by title\n      </label>\n\n      <div className=\"control\">\n        <input\n          type=\"text\"\n          id=\"search-query\"\n          className=\"input\"\n          value={query}\n          placeholder=\"Type search word\"\n          onChange={setSearchQuery}\n        />\n      </div>\n    </div>\n    <div className=\"field\">\n      <label htmlFor=\"status-filter\" className=\"label\">\n        Filter todos by status\n      </label>\n\n      <div className=\"control\">\n        <select\n          value={todoStatus}\n          onChange={setTodoStatus}\n        >\n          <option value=\"both\">both</option>\n          <option value=\"completed\">completed</option>\n          <option value=\"in-progress\">in progress</option>\n        </select>\n      </div>\n    </div>\n  </form>\n);\n\nTodoListForm.propTypes = {\n  query: PropTypes.string.isRequired,\n  todoStatus: PropTypes.string.isRequired,\n  setTodoStatus: PropTypes.func.isRequired,\n  setSearchQuery: PropTypes.func.isRequired,\n};\n","import classnames from 'classnames';\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport { Todo } from '../Todo';\nimport { TodoListForm } from '../TodoListForm';\nimport { TodoType } from '../../types';\nimport './TodoList.scss';\n\nexport const TodoList = ({\n  todos,\n  selectedUserId,\n  onUserSelect,\n  setSearchQuery,\n  query,\n  setTodoStatus,\n  todoStatus,\n}) => (\n  <>\n    <div className=\"TodoList\">\n      <h2>\n        Total Todos:\n        {todos.length}\n      </h2>\n      <TodoListForm\n        query={query}\n        setSearchQuery={setSearchQuery}\n        setTodoStatus={setTodoStatus}\n        todoStatus={todoStatus}\n      />\n      <div className=\"TodoList__list-container\">\n        <ul className=\"TodoList__list\">\n          {todos.map(todo => (\n            <li\n              key={todo.id}\n              className={classnames(\n                'TodoList__item',\n                {\n                  'TodoList__item--unchecked': !todo.completed,\n                  'TodoList__item--checked': todo.completed,\n                },\n              )}\n            >\n              <Todo\n                todo={todo}\n                selectedUserId={selectedUserId}\n                onUserSelect={onUserSelect}\n              />\n            </li>\n          ))}\n        </ul>\n      </div>\n    </div>\n  </>\n);\n\nTodoList.propTypes = {\n  todos: PropTypes.arrayOf(TodoType.isRequired).isRequired,\n  selectedUserId: PropTypes.number.isRequired,\n  query: PropTypes.string.isRequired,\n  todoStatus: PropTypes.string.isRequired,\n  setTodoStatus: PropTypes.func.isRequired,\n  setSearchQuery: PropTypes.func.isRequired,\n  onUserSelect: PropTypes.func.isRequired,\n};\n","const BASE_URL = 'https://mate-api.herokuapp.com';\n\nexport const request = endpoint => fetch(`${BASE_URL}${endpoint}`)\n  .then((response) => {\n    if (!response.ok) {\n      throw new Error(`${response.status} - ${response.statusText}`);\n    }\n\n    return response.json();\n  });\n\nexport const getAllTodos = () => request('/todos');\n\nexport const getUserById = userId => request(`/users/${userId}`);\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { getUserById } from '../../api';\nimport './CurrentUser.scss';\n\nexport class CurrentUser extends React.Component {\n  state = {\n    user: null,\n    error: false,\n  }\n\n  componentDidUpdate(prevProps) {\n    if (this.props.userId !== prevProps.userId) {\n      this.getUser();\n    }\n  }\n\n  getUser() {\n    getUserById(this.props.userId)\n      .then((response) => {\n        if (response.data === null) {\n          throw new Error(`No user with id ${this.props.userId}`);\n        }\n\n        this.setState({\n          user: response.data,\n          error: false,\n        });\n      })\n      .catch((error) => {\n        this.setState({\n          error,\n        });\n      });\n  }\n\n  render() {\n    if (this.state.error) {\n      return (\n        <p>{this.state.error.message}</p>\n      );\n    }\n\n    if (this.state.user === null) {\n      this.getUser();\n    }\n\n    return (\n      <>\n        { this.state.user\n          ? (\n            <div className=\"CurrentUser\">\n              <h2 className=\"CurrentUser__title\">\n                <span>\n                  Selected user:\n                  {this.state.user.id}\n                </span>\n              </h2>\n\n              <h3 className=\"CurrentUser__name\">\n                {this.state.user.name}\n              </h3>\n              <p className=\"CurrentUser__email\">\n                {this.state.user.email}\n              </p>\n              <p className=\"CurrentUser__phone\">\n                {this.state.user.phone}\n              </p>\n\n              <button\n                type=\"button\"\n                onClick={this.props.clearSelectedUserId}\n                className=\"button is-primary CurrentUser__clear\"\n              >\n                Clear\n              </button>\n            </div>\n          )\n          : (\n            <button\n              type=\"button\"\n              className=\"button is-primary is-loading\"\n              title=\"User is loading\"\n            />\n          )}\n      </>\n    );\n  }\n}\n\nCurrentUser.propTypes = {\n  userId: PropTypes.number.isRequired,\n  clearSelectedUserId: PropTypes.func.isRequired,\n};\n","import React from 'react';\nimport './App.scss';\nimport './styles/general.scss';\nimport { TodoList } from './components/TodoList';\nimport { CurrentUser } from './components/CurrentUser';\n\nimport { getAllTodos } from './api';\n\nclass App extends React.Component {\n  state = {\n    todos: [],\n    selectedUserId: 4,\n    query: '',\n    status: 'both',\n  };\n\n  componentDidMount() {\n    getAllTodos()\n      .then(response => response.data)\n      .then((todos) => {\n        this.setState({\n          todos,\n        });\n      });\n  }\n\n  clearSelectedUserId = () => {\n    this.setState({\n      selectedUserId: 0,\n    });\n  }\n\n  setSelectedUserId = (userId) => {\n    this.setState({\n      selectedUserId: userId,\n    });\n  }\n\n  setTodoStatus = ({ target }) => {\n    this.setState({\n      status: target.value,\n    });\n  }\n\n  setSearchQuery = ({ target }) => {\n    this.setState({\n      query: target.value,\n    });\n  }\n\n  render() {\n    const { todos, selectedUserId } = this.state;\n\n    return (\n      <div className=\"App\">\n        <div className=\"App__sidebar\">\n          <TodoList\n            todos={todos.filter((todo) => {\n              const title = todo.title === null ? '' : todo.title.toLowerCase();\n              const query = this.state.query.toLowerCase();\n              let hasStatus;\n\n              switch (this.state.status) {\n                case 'in-progress': {\n                  hasStatus = !todo.completed;\n                  break;\n                }\n\n                case 'completed': {\n                  hasStatus = todo.completed;\n                  break;\n                }\n\n                default: {\n                  hasStatus = true;\n                  break;\n                }\n              }\n\n              return title.includes(query) && hasStatus;\n            })}\n            selectedUserId={selectedUserId}\n            onUserSelect={this.setSelectedUserId}\n            setSearchQuery={this.setSearchQuery}\n            setTodoStatus={this.setTodoStatus}\n            todoStatus={this.state.status}\n            query={this.state.query}\n          />\n        </div>\n\n        <div className=\"App__content\">\n          <div className=\"App__content-container\">\n            {selectedUserId ? (\n              <CurrentUser\n                userId={selectedUserId}\n                clearSelectedUserId={this.clearSelectedUserId}\n              />\n            ) : 'No user selected'}\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}